---
import ProfilesList from "@/components/ProfilesList.astro";
import Layout from "../layouts/Layout.astro";
import MapList from "@/components/MapList.astro";
import Map from "@/components/Map.astro";
import Report from "@/components/Report.astro";
import { AccidentesChart } from "@/components/AccidentChart";
import Smmap from "@/components/Smmap.astro";
import Modal from "@/components/Modal.astro";
---

<Layout>
  <div class="grid grid-cols-12 container gap-4">
    <div class="col-span-2 hidden md:block">
      <MapList />
    </div>
    <div class="md:col-span-10 col-span-12 flex flex-col overflow-auto pt-10 md:pt-40">
      <Report />

      <h2 class="p-6 text-4xl font-bold">Dashboard</h2>
      <div class="flex w-full flex-col md:flex-row gap-4">
        <ProfilesList />
        <AccidentesChart client:load />
      </div>
      <hr />
      <h2 class="p-6 text-4xl font-bold">Current Map</h2>

      <div class="hidden md:block">
        <Map id="map" />
      </div>
      <div class="md:hidden overflow-hidden">
        <Smmap id="smmap" />
      </div>
      <div class="flex w-full justify-center">
        <Modal id="modal" />
      </div>
    </div>
  </div>
</Layout>

<!-- Script que se ejecuta solo en el cliente -->
<script>
  window.addEventListener("DOMContentLoaded", () => {
    let zones = []; // Inicializar como array vacío para evitar undefined
    let showModal = false;

    document.addEventListener("zonesUpdated", (event) => {
      const { zones: newZones = [], showModal: newShowModal = false } = event.detail;

      if (!Array.isArray(newZones)) {
        console.error("zonesUpdated recibió un valor no válido:", newZones);
        return;
      }

      zones = newZones; // Asegurar que se actualiza correctamente
      showModal = newShowModal;

      // Update Map
      const mapZone = document.getElementById("map-zone");
      if (mapZone) {
        const hasRestrictedZone = zones.some(zone => zone?.status === 1);
        mapZone.classList.toggle("border-red-500", hasRestrictedZone);
        mapZone.classList.toggle("bg-red-500/50", hasRestrictedZone);
        mapZone.classList.toggle("border-yellow-500", !hasRestrictedZone);
        mapZone.classList.toggle("bg-yellow-500/50", !hasRestrictedZone);
      }

      // Show or hide modal
      const popupModal = document.getElementById("popup-modal");
      if (popupModal) {
        popupModal.classList.toggle("flex", showModal);
        popupModal.classList.toggle("hidden", !showModal);
      }
    });

    const fetchZonesStatus = async () => {
      try {
        const response = await fetch("http://52.143.185.255:56565/getZonesStatus", {
          method: "GET",
          headers: { "Content-Type": "application/json" }
        });

        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

        const data = await response.json();

        if (!data.Zones || !Array.isArray(data.Zones)) {
          console.warn("Respuesta del servidor no contiene 'Zones' como array, devolviendo dummy.");
          return getDummyZones();
        }

        return data.Zones;
      } catch (error) {
        console.error("Error al obtener el estado de las zonas:", error);
        return getDummyZones();
      }
    };

    const getDummyZones = () => [
      {
        id: 0,
        status: 0,
        name: "Work",
        type: 0,
        location: { lat: 41.371563, long: 2.152216, rad: 2000 },
        devices: [],
      },
      {
        id: 1,
        status: 0,
        name: "Restricted",
        type: 1,
        location: { lat: 41.36852, long: 2.160378, rad: 2000 },
        devices: [],
      }
    ];

    const updateZones = async () => {
      const newZones = await fetchZonesStatus();
      console.log("Zonas actualizadas:", newZones);
      if (!Array.isArray(newZones)) {
        console.error("fetchZonesStatus() devolvió un valor no válido:", newZones);
        return;
      }

      zones = newZones;
      showModal = zones.some(zone => zone?.status === 1); // Evita error de undefined

      document.dispatchEvent(new CustomEvent("zonesUpdated", { detail: { zones, showModal } }));
    };

    updateZones();
    setInterval(updateZones, 5000);
  });
</script>

